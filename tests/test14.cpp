#include <gtest/gtest.h>  // googletest header file
#include <filesystem>
#include "../include/P452.hpp"
using std::filesystem::current_path;
inline std::string
resolvePath(const std::string& relPath)
{
  auto baseDir = std::filesystem::current_path();
  while (baseDir.has_relative_path()) {
    auto test = std::filesystem::path(relPath);
   auto combinePath = baseDir / test;
    if (std::filesystem::exists(combinePath)) {
      return combinePath.string();
    }
    baseDir = baseDir.parent_path();
  }
  throw std::runtime_error("File not found!" + relPath);
}
TEST(P452, Test14) {
std::string path = resolvePath("src/maps/");
P452DigitalMaps maps = P452DigitalMaps(path); // load P452 maps;
// Path profile: test_profile_mixed_109km
double press = 1013.000000;
double temp = 15.000000;
double phit_e = 0.000000;
double phit_n = 51.800000;
double phir_e = 0.000000;
double phir_n = 50.819700;
double Gt = 20.000000;
double Gr = 5.000000;
int    pol = 1;
double dct = 34.000000;
double dcr = 8.000000;
double f = 0.200000;
double p = 0.100000;
double htg = 10.000000;
double hrg = 10.000000;
double rDist[110];
double rHeight[110];
double g[110];
int iZone[110];
rDist[0] = 0.000000000;
rDist[1] = 1.000000000;
rDist[2] = 2.000000000;
rDist[3] = 3.000000000;
rDist[4] = 4.000000000;
rDist[5] = 5.000000000;
rDist[6] = 6.000000000;
rDist[7] = 7.000000000;
rDist[8] = 8.000000000;
rDist[9] = 9.000000000;
rDist[10] = 10.000000000;
rDist[11] = 11.000000000;
rDist[12] = 12.000000000;
rDist[13] = 13.000000000;
rDist[14] = 14.000000000;
rDist[15] = 15.000000000;
rDist[16] = 16.000000000;
rDist[17] = 17.000000000;
rDist[18] = 18.000000000;
rDist[19] = 19.000000000;
rDist[20] = 20.000000000;
rDist[21] = 21.000000000;
rDist[22] = 22.000000000;
rDist[23] = 23.000000000;
rDist[24] = 24.000000000;
rDist[25] = 25.000000000;
rDist[26] = 26.000000000;
rDist[27] = 27.000000000;
rDist[28] = 28.000000000;
rDist[29] = 29.000000000;
rDist[30] = 30.000000000;
rDist[31] = 31.000000000;
rDist[32] = 32.000000000;
rDist[33] = 33.000000000;
rDist[34] = 34.000000000;
rDist[35] = 35.000000000;
rDist[36] = 36.000000000;
rDist[37] = 37.000000000;
rDist[38] = 38.000000000;
rDist[39] = 39.000000000;
rDist[40] = 40.000000000;
rDist[41] = 41.000000000;
rDist[42] = 42.000000000;
rDist[43] = 43.000000000;
rDist[44] = 44.000000000;
rDist[45] = 45.000000000;
rDist[46] = 46.000000000;
rDist[47] = 47.000000000;
rDist[48] = 48.000000000;
rDist[49] = 49.000000000;
rDist[50] = 50.000000000;
rDist[51] = 51.000000000;
rDist[52] = 52.000000000;
rDist[53] = 53.000000000;
rDist[54] = 54.000000000;
rDist[55] = 55.000000000;
rDist[56] = 56.000000000;
rDist[57] = 57.000000000;
rDist[58] = 58.000000000;
rDist[59] = 59.000000000;
rDist[60] = 60.000000000;
rDist[61] = 61.000000000;
rDist[62] = 62.000000000;
rDist[63] = 63.000000000;
rDist[64] = 64.000000000;
rDist[65] = 65.000000000;
rDist[66] = 66.000000000;
rDist[67] = 67.000000000;
rDist[68] = 68.000000000;
rDist[69] = 69.000000000;
rDist[70] = 70.000000000;
rDist[71] = 71.000000000;
rDist[72] = 72.000000000;
rDist[73] = 73.000000000;
rDist[74] = 74.000000000;
rDist[75] = 75.000000000;
rDist[76] = 76.000000000;
rDist[77] = 77.000000000;
rDist[78] = 78.000000000;
rDist[79] = 79.000000000;
rDist[80] = 80.000000000;
rDist[81] = 81.000000000;
rDist[82] = 82.000000000;
rDist[83] = 83.000000000;
rDist[84] = 84.000000000;
rDist[85] = 85.000000000;
rDist[86] = 86.000000000;
rDist[87] = 87.000000000;
rDist[88] = 88.000000000;
rDist[89] = 89.000000000;
rDist[90] = 90.000000000;
rDist[91] = 91.000000000;
rDist[92] = 92.000000000;
rDist[93] = 93.000000000;
rDist[94] = 94.000000000;
rDist[95] = 95.000000000;
rDist[96] = 96.000000000;
rDist[97] = 97.000000000;
rDist[98] = 98.000000000;
rDist[99] = 99.000000000;
rDist[100] = 100.000000000;
rDist[101] = 101.000000000;
rDist[102] = 102.000000000;
rDist[103] = 103.000000000;
rDist[104] = 104.000000000;
rDist[105] = 105.000000000;
rDist[106] = 106.000000000;
rDist[107] = 107.000000000;
rDist[108] = 108.000000000;
rDist[109] = 109.000000000;
rHeight[0] = 40.000000;
rHeight[1] = 24.000000;
rHeight[2] = 35.000000;
rHeight[3] = 38.000000;
rHeight[4] = 41.000000;
rHeight[5] = 39.000000;
rHeight[6] = 41.000000;
rHeight[7] = 41.000000;
rHeight[8] = 44.000000;
rHeight[9] = 35.000000;
rHeight[10] = 39.000000;
rHeight[11] = 24.000000;
rHeight[12] = 26.000000;
rHeight[13] = 32.000000;
rHeight[14] = 36.000000;
rHeight[15] = 43.000000;
rHeight[16] = 49.000000;
rHeight[17] = 48.000000;
rHeight[18] = 48.000000;
rHeight[19] = 45.000000;
rHeight[20] = 41.000000;
rHeight[21] = 35.000000;
rHeight[22] = 36.000000;
rHeight[23] = 36.000000;
rHeight[24] = 42.000000;
rHeight[25] = 43.000000;
rHeight[26] = 52.000000;
rHeight[27] = 55.000000;
rHeight[28] = 73.000000;
rHeight[29] = 67.000000;
rHeight[30] = 68.000000;
rHeight[31] = 53.000000;
rHeight[32] = 50.000000;
rHeight[33] = 14.000000;
rHeight[34] = 1.000000;
rHeight[35] = 0.000000;
rHeight[36] = 0.000000;
rHeight[37] = 0.000000;
rHeight[38] = 0.000000;
rHeight[39] = 0.000000;
rHeight[40] = 0.000000;
rHeight[41] = 0.000000;
rHeight[42] = 0.000000;
rHeight[43] = 0.000000;
rHeight[44] = 0.000000;
rHeight[45] = 0.000000;
rHeight[46] = 0.000000;
rHeight[47] = 0.000000;
rHeight[48] = 0.000000;
rHeight[49] = 0.000000;
rHeight[50] = 0.000000;
rHeight[51] = 0.000000;
rHeight[52] = 0.000000;
rHeight[53] = 0.000000;
rHeight[54] = 0.000000;
rHeight[55] = 0.000000;
rHeight[56] = 0.000000;
rHeight[57] = 0.000000;
rHeight[58] = 0.000000;
rHeight[59] = 0.000000;
rHeight[60] = 0.000000;
rHeight[61] = 0.000000;
rHeight[62] = 0.000000;
rHeight[63] = 0.000000;
rHeight[64] = 0.000000;
rHeight[65] = 0.000000;
rHeight[66] = 0.000000;
rHeight[67] = 0.000000;
rHeight[68] = 0.000000;
rHeight[69] = 0.000000;
rHeight[70] = 0.000000;
rHeight[71] = 0.000000;
rHeight[72] = 0.000000;
rHeight[73] = 0.000000;
rHeight[74] = 0.000000;
rHeight[75] = 0.000000;
rHeight[76] = 0.000000;
rHeight[77] = 0.000000;
rHeight[78] = 45.000000;
rHeight[79] = 54.000000;
rHeight[80] = 63.000000;
rHeight[81] = 79.000000;
rHeight[82] = 85.000000;
rHeight[83] = 39.000000;
rHeight[84] = 21.000000;
rHeight[85] = 15.000000;
rHeight[86] = 37.000000;
rHeight[87] = 42.000000;
rHeight[88] = 63.000000;
rHeight[89] = 51.000000;
rHeight[90] = 35.000000;
rHeight[91] = 68.000000;
rHeight[92] = 68.000000;
rHeight[93] = 53.000000;
rHeight[94] = 63.000000;
rHeight[95] = 75.000000;
rHeight[96] = 92.000000;
rHeight[97] = 174.000000;
rHeight[98] = 184.000000;
rHeight[99] = 145.000000;
rHeight[100] = 158.000000;
rHeight[101] = 122.000000;
rHeight[102] = 129.000000;
rHeight[103] = 97.000000;
rHeight[104] = 100.000000;
rHeight[105] = 91.000000;
rHeight[106] = 144.000000;
rHeight[107] = 119.000000;
rHeight[108] = 154.000000;
rHeight[109] = 183.000000;
g[0] = 40.000000;
g[1] = 24.000000;
g[2] = 35.000000;
g[3] = 38.000000;
g[4] = 41.000000;
g[5] = 39.000000;
g[6] = 41.000000;
g[7] = 41.000000;
g[8] = 44.000000;
g[9] = 35.000000;
g[10] = 39.000000;
g[11] = 24.000000;
g[12] = 26.000000;
g[13] = 32.000000;
g[14] = 36.000000;
g[15] = 43.000000;
g[16] = 49.000000;
g[17] = 48.000000;
g[18] = 48.000000;
g[19] = 45.000000;
g[20] = 41.000000;
g[21] = 35.000000;
g[22] = 36.000000;
g[23] = 36.000000;
g[24] = 42.000000;
g[25] = 43.000000;
g[26] = 52.000000;
g[27] = 55.000000;
g[28] = 73.000000;
g[29] = 67.000000;
g[30] = 68.000000;
g[31] = 53.000000;
g[32] = 50.000000;
g[33] = 14.000000;
g[34] = 1.000000;
g[35] = 0.000000;
g[36] = 0.000000;
g[37] = 0.000000;
g[38] = 0.000000;
g[39] = 0.000000;
g[40] = 0.000000;
g[41] = 0.000000;
g[42] = 0.000000;
g[43] = 0.000000;
g[44] = 0.000000;
g[45] = 0.000000;
g[46] = 0.000000;
g[47] = 0.000000;
g[48] = 0.000000;
g[49] = 0.000000;
g[50] = 0.000000;
g[51] = 0.000000;
g[52] = 0.000000;
g[53] = 0.000000;
g[54] = 0.000000;
g[55] = 0.000000;
g[56] = 0.000000;
g[57] = 0.000000;
g[58] = 0.000000;
g[59] = 0.000000;
g[60] = 0.000000;
g[61] = 0.000000;
g[62] = 0.000000;
g[63] = 0.000000;
g[64] = 0.000000;
g[65] = 0.000000;
g[66] = 0.000000;
g[67] = 0.000000;
g[68] = 0.000000;
g[69] = 0.000000;
g[70] = 0.000000;
g[71] = 0.000000;
g[72] = 0.000000;
g[73] = 0.000000;
g[74] = 0.000000;
g[75] = 0.000000;
g[76] = 0.000000;
g[77] = 0.000000;
g[78] = 45.000000;
g[79] = 54.000000;
g[80] = 63.000000;
g[81] = 79.000000;
g[82] = 85.000000;
g[83] = 39.000000;
g[84] = 21.000000;
g[85] = 15.000000;
g[86] = 37.000000;
g[87] = 42.000000;
g[88] = 63.000000;
g[89] = 51.000000;
g[90] = 35.000000;
g[91] = 68.000000;
g[92] = 68.000000;
g[93] = 53.000000;
g[94] = 63.000000;
g[95] = 75.000000;
g[96] = 92.000000;
g[97] = 174.000000;
g[98] = 184.000000;
g[99] = 145.000000;
g[100] = 158.000000;
g[101] = 122.000000;
g[102] = 129.000000;
g[103] = 97.000000;
g[104] = 100.000000;
g[105] = 91.000000;
g[106] = 144.000000;
g[107] = 119.000000;
g[108] = 154.000000;
g[109] = 183.000000;
iZone[0] = 1;
iZone[1] = 1;
iZone[2] = 1;
iZone[3] = 1;
iZone[4] = 1;
iZone[5] = 1;
iZone[6] = 1;
iZone[7] = 1;
iZone[8] = 1;
iZone[9] = 1;
iZone[10] = 1;
iZone[11] = 1;
iZone[12] = 1;
iZone[13] = 1;
iZone[14] = 1;
iZone[15] = 1;
iZone[16] = 1;
iZone[17] = 1;
iZone[18] = 1;
iZone[19] = 1;
iZone[20] = 1;
iZone[21] = 1;
iZone[22] = 1;
iZone[23] = 1;
iZone[24] = 1;
iZone[25] = 1;
iZone[26] = 1;
iZone[27] = 1;
iZone[28] = 1;
iZone[29] = 1;
iZone[30] = 1;
iZone[31] = 1;
iZone[32] = 1;
iZone[33] = 1;
iZone[34] = 1;
iZone[35] = 3;
iZone[36] = 3;
iZone[37] = 3;
iZone[38] = 3;
iZone[39] = 3;
iZone[40] = 3;
iZone[41] = 3;
iZone[42] = 3;
iZone[43] = 3;
iZone[44] = 3;
iZone[45] = 3;
iZone[46] = 3;
iZone[47] = 3;
iZone[48] = 3;
iZone[49] = 3;
iZone[50] = 3;
iZone[51] = 3;
iZone[52] = 3;
iZone[53] = 3;
iZone[54] = 3;
iZone[55] = 3;
iZone[56] = 3;
iZone[57] = 3;
iZone[58] = 3;
iZone[59] = 3;
iZone[60] = 3;
iZone[61] = 3;
iZone[62] = 3;
iZone[63] = 3;
iZone[64] = 3;
iZone[65] = 3;
iZone[66] = 3;
iZone[67] = 3;
iZone[68] = 3;
iZone[69] = 3;
iZone[70] = 3;
iZone[71] = 3;
iZone[72] = 3;
iZone[73] = 3;
iZone[74] = 3;
iZone[75] = 3;
iZone[76] = 3;
iZone[77] = 3;
iZone[78] = 1;
iZone[79] = 1;
iZone[80] = 1;
iZone[81] = 1;
iZone[82] = 1;
iZone[83] = 1;
iZone[84] = 1;
iZone[85] = 1;
iZone[86] = 1;
iZone[87] = 1;
iZone[88] = 1;
iZone[89] = 1;
iZone[90] = 1;
iZone[91] = 1;
iZone[92] = 1;
iZone[93] = 1;
iZone[94] = 1;
iZone[95] = 1;
iZone[96] = 1;
iZone[97] = 2;
iZone[98] = 2;
iZone[99] = 2;
iZone[100] = 2;
iZone[101] = 2;
iZone[102] = 2;
iZone[103] = 1;
iZone[104] = 2;
iZone[105] = 1;
iZone[106] = 2;
iZone[107] = 2;
iZone[108] = 2;
iZone[109] = 2;
double ff[35];
double pp[35];
ff[0] = 0.2000000000000000;
ff[1] = 0.1000000000000000;
ff[2] = 0.2500000000000000;
ff[3] = 0.5000000000000000;
ff[4] = 0.7500000000000000;
ff[5] = 1.0000000000000000;
ff[6] = 2.5000000000000000;
ff[7] = 5.0000000000000000;
ff[8] = 7.5000000000000000;
ff[9] = 10.0000000000000000;
ff[10] = 15.0000000000000000;
ff[11] = 20.0000000000000000;
ff[12] = 25.0000000000000000;
ff[13] = 30.0000000000000000;
ff[14] = 35.0000000000000000;
ff[15] = 40.0000000000000000;
ff[16] = 45.0000000000000000;
ff[17] = 50.0000000000000000;
ff[18] = 0.2000000000000000;
ff[19] = 0.2000000000000000;
ff[20] = 0.2000000000000000;
ff[21] = 0.2000000000000000;
ff[22] = 0.2000000000000000;
ff[23] = 0.2000000000000000;
ff[24] = 0.2000000000000000;
ff[25] = 0.2000000000000000;
ff[26] = 0.2000000000000000;
ff[27] = 0.2000000000000000;
ff[28] = 0.2000000000000000;
ff[29] = 0.2000000000000000;
ff[30] = 0.2000000000000000;
ff[31] = 0.2000000000000000;
ff[32] = 0.2000000000000000;
ff[33] = 0.2000000000000000;
ff[34] = 0.2000000000000000;
pp[0] = 0.1000000000000000;
pp[1] = 0.1000000000000000;
pp[2] = 0.1000000000000000;
pp[3] = 0.1000000000000000;
pp[4] = 0.1000000000000000;
pp[5] = 0.1000000000000000;
pp[6] = 0.1000000000000000;
pp[7] = 0.1000000000000000;
pp[8] = 0.1000000000000000;
pp[9] = 0.1000000000000000;
pp[10] = 0.1000000000000000;
pp[11] = 0.1000000000000000;
pp[12] = 0.1000000000000000;
pp[13] = 0.1000000000000000;
pp[14] = 0.1000000000000000;
pp[15] = 0.1000000000000000;
pp[16] = 0.1000000000000000;
pp[17] = 0.1000000000000000;
pp[18] = 0.0100000000000000;
pp[19] = 0.0200000000000000;
pp[20] = 0.0500000000000000;
pp[21] = 0.1000000000000000;
pp[22] = 0.2000000000000000;
pp[23] = 0.5000000000000000;
pp[24] = 1.0000000000000000;
pp[25] = 5.0000000000000000;
pp[26] = 10.0000000000000000;
pp[27] = 15.0000000000000000;
pp[28] = 20.0000000000000000;
pp[29] = 25.0000000000000000;
pp[30] = 30.0000000000000000;
pp[31] = 35.0000000000000000;
pp[32] = 40.0000000000000000;
pp[33] = 45.0000000000000000;
pp[34] = 50.0000000000000000;
// Results obtained from the MATLAB implementation of ITU-R P.452-18
// available on the ITU-R SG3 sharefolder
double expectedResult[35];
expectedResult[0] =  137.3490508271313786;
expectedResult[1] =  135.9775653485454541;
expectedResult[2] =  134.7771335383297640;
expectedResult[3] =  125.2555788024525327;
expectedResult[4] =  129.3794016058241709;
expectedResult[5] =  132.3400031510038559;
expectedResult[6] =  141.9648584601924597;
expectedResult[7] =  149.6660461132158844;
expectedResult[8] =  154.5285377827409548;
expectedResult[9] =  158.3037621101526042;
expectedResult[10] =  165.0366716883197853;
expectedResult[11] =  178.4574109532221087;
expectedResult[12] =  185.9172214566412435;
expectedResult[13] =  181.8269514959608557;
expectedResult[14] =  184.7233361993904168;
expectedResult[15] =  189.9560354574122698;
expectedResult[16] =  198.6541257796924924;
expectedResult[17] =  221.7189259921553628;
expectedResult[18] =  131.9641074057215633;
expectedResult[19] =  133.2036863229364485;
expectedResult[20] =  135.2899612676283709;
expectedResult[21] =  137.3490508271313786;
expectedResult[22] =  139.9919326080163557;
expectedResult[23] =  143.9458144405685402;
expectedResult[24] =  144.7371402887090994;
expectedResult[25] =  147.9715356947126566;
expectedResult[26] =  151.2818679511568405;
expectedResult[27] =  153.4419632559217348;
expectedResult[28] =  155.1167564564335635;
expectedResult[29] =  156.5240982951410160;
expectedResult[30] =  157.7650342342591898;
expectedResult[31] =  158.8962621115640843;
expectedResult[32] =  159.9545225165396118;
expectedResult[33] =  160.9680027882263857;
expectedResult[34] =  161.9781314955773723;
vector<double> rDisti;
rDisti.reserve(110);
vector<double> rHeighti;
rHeighti.reserve(110);
vector<double> gHeighti;
gHeighti.reserve(110);
vector<int> iZonei;
iZonei.reserve(110);
for (int i = 0; i < 110; i++) {
       rDisti.push_back(rDist[i]);
       rHeighti.push_back(rHeight[i]);
       gHeighti.push_back(g[i]);
       iZonei.push_back(iZone[i]);
}
for (int ii = 0; ii < 35; ii++) {
double result = tl_p452(maps,ff[ii], pp[ii], rDisti, rHeighti, gHeighti, iZonei, htg, hrg, phit_e, phit_n, phir_e, phir_n,  Gt, Gr, pol, dct, dcr, press, temp);
EXPECT_NEAR(expectedResult[ii], result, 0.000001);
  }
}
